<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <module name="NewlineAtEndOfFile" />

    <module name="LineLength">
        <property name="max" value="100" />
        <property name="severity" value="warning" />
    </module>

    <module name="FileTabCharacter" />

    <module name="RegexpMultiline">
        <property name="format" value="(?s:(\r\n|\r).*)"/>
        <property name="message" value="CRLF and CR line endings are prohibited, but this file uses them."/>
    </module>
    

    <module name="TreeWalker">
        <!-- Some of these, but now all, have been copied from
            https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml -->
        <!-- For any explanations, go to https://checkstyle.sourceforge.io/google_style.html -->
        

        <module name="OuterTypeFilename" />

        <module name="TodoComment">
            <property name="severity" value="warning" />
            <property name="format" value="TODO" />
        </module>
        
        <module name="EmptyLineSeparator">
            <property name="tokens"
                value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                            STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF,
                            COMPACT_CTOR_DEF" />
            <property name="allowMultipleEmptyLines" value="false" />
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>

        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT" />
        </module>

        <module name="AvoidStarImport">
            <property name="severity" value="warning" />
        </module>

        <module name="OneTopLevelClass" />

        <module name="OverloadMethodsDeclarationOrder" />

        <module name="NeedBraces" />
        
        <module name="LeftCurly">
            <property name="tokens"
                value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                            INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                            LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                            LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                            OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF" />
        </module>

        <module name="RightCurly">
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                            LITERAL_DO" />
        </module>

        <module name="RightCurly">
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
                            INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,
                            COMPACT_CTOR_DEF" />
        </module>

        <module name="EmptyBlock">
            <property name="option" value="text" />
        </module>

        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true" />
            <property name="separateLineBetweenGroups" value="true" />
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE" />
            <property name="tokens" value="IMPORT, STATIC_IMPORT, PACKAGE_DEF" />
        </module>

        <module name="Indentation">
            <property name="lineWrappingIndentation" value="8" />
        </module>

        <module name="OneStatementPerLine" />

        <module name="OperatorWrap">
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                        LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF,
                        TYPE_EXTENSION_AND " />
        </module>
        
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="tokens" value="ELLIPSIS" />
            <property name="option" value="EOL" />
        </module>

        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="option" value="EOL" />
        </module>
        
        <module name="SeparatorWrap">
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>

        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyLambdas" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <property name="ignoreEnhancedForColon" value="false" />
            <property name="tokens"
                value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                            BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                            LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                            LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                            LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                            NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                            SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks
                    may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>
        
        <module name="MethodParamPad">
            <property name="tokens"
                value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,
                            SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF" />
        </module>

        <module name="ParenPad">
            <property name="tokens"
                value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,
                        EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,
                        LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,
                        METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA,
                        RECORD_DEF" />
        </module>

        <module name="WhitespaceAfter">
            <property name="tokens"
                value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN,
                            LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS,
                            LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA,
                            LITERAL_YIELD, LITERAL_CASE" />
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens"
                value="COMMA, SEMI, POST_INC, POST_DEC, DOT,
                            LABELED_STAT, METHOD_REF" />
            <property name="allowLineBreaks" value="true" />
        </module>

        <module name="NoWhitespaceBeforeCaseDefaultColon" />

        <module name="VariableDeclarationUsageDistance">
            <property name="severity" value="warning" />
            <property name="allowedDistance" value="8" />
        </module>

        <module name="ArrayTypeStyle" />

        <module name="MissingSwitchDefault">
            <property name="severity" value="warning" />
        </module>

        <module name="AnnotationLocation" />

        <module name="CommentsIndentation" />

        <module name="ModifierOrder" />

        <module name="UpperEll" />
        
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern"
                value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="TypeName">
            <property name="tokens"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                ANNOTATION_DEF, RECORD_DEF" />
            <message key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="MethodName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="MemberName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Member name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="LambdaParameterName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="CatchParameterName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="LocalVariableName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="PatternVariableName">
            <property name="format" value="^[a-z][A-Za-z0-9]*$" />
            <message key="name.invalidPattern"
                value="Pattern variable name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern"
                value="Record component name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="RecordTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Record type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>

        <module name="NoFinalizer"/>

        <module name="MethodLength">
            <property name="severity" value="warning" />
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, COMPACT_CTOR_DEF" />
            <property name="max" value="100" />
        </module>

        <module name="CyclomaticComplexity">
            <property name="severity" value="warning" />
            <property name="switchBlockAsSingleDecisionPoint" value="true" />
            <property name="max" value="10" />
            <property name="tokens"
                value="LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_CASE, QUESTION" />
        </module>

        <module name="UnusedImports">
            <property name="severity" value="warning" />
        </module>
        
    

    </module>
</module>